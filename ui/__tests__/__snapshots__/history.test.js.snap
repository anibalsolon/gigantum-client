// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test create history has a replace method 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DashboardContainer
    footerWorkerCallback={[Function]}
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
    match={
      Object {
        "params": Object {
          "id": "labbbooks",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="Dashboard__view flex-1-0-auto"
      >
        <ReactRelayQueryRenderer
          environment={
            RelayModernEnvironment {
              "__setNet": [Function],
              "_deferrableSelections": Set {},
              "_network": Object {
                "execute": [Function],
              },
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Set {},
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Set {},
                "_pendingOptimisticUpdates": Set {},
                "_pendingUpdaters": Set {},
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getRequest": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            }
          }
          query={[Function]}
          render={[Function]}
          variables={
            Object {
              "cursor": null,
              "first": 100,
              "orderBy": "modified_on",
              "sort": "desc",
            }
          }
        />
      </div>,
      "className": "Dashboard flex flex-column",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ReactRelayQueryRenderer
          environment={
            RelayModernEnvironment {
              "__setNet": [Function],
              "_deferrableSelections": Set {},
              "_network": Object {
                "execute": [Function],
              },
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Set {},
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Set {},
                "_pendingOptimisticUpdates": Set {},
                "_pendingUpdaters": Set {},
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getRequest": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            }
          }
          query={[Function]}
          render={[Function]}
          variables={
            Object {
              "cursor": null,
              "first": 100,
              "orderBy": "modified_on",
              "sort": "desc",
            }
          }
        />,
        "className": "Dashboard__view flex-1-0-auto",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "environment": RelayModernEnvironment {
            "__setNet": [Function],
            "_deferrableSelections": Set {},
            "_network": Object {
              "execute": [Function],
            },
            "_publishQueue": RelayPublishQueue {
              "_appliedOptimisticUpdates": Set {},
              "_backup": Object {},
              "_handlerProvider": [Function],
              "_pendingBackupRebase": false,
              "_pendingData": Set {},
              "_pendingOptimisticUpdates": Set {},
              "_pendingUpdaters": Set {},
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
            },
            "_store": RelayMarkSweepStore {
              "_gcEnabled": true,
              "_hasScheduledGC": false,
              "_index": 0,
              "_recordSource": Object {},
              "_roots": Map {},
              "_subscriptions": Set {},
              "_updatedRecordIDs": Object {},
            },
            "configName": undefined,
            "unstable_internal": Object {
              "areEqualSelectors": [Function],
              "createFragmentSpecResolver": [Function],
              "createOperationSelector": [Function],
              "getDataIDsFromObject": [Function],
              "getFragment": [Function],
              "getRequest": [Function],
              "getSelector": [Function],
              "getSelectorList": [Function],
              "getSelectorsFromObject": [Function],
              "getVariablesFromObject": [Function],
            },
          },
          "query": [Function],
          "render": [Function],
          "variables": Object {
            "cursor": null,
            "first": 100,
            "orderBy": "modified_on",
            "sort": "desc",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="Dashboard__view flex-1-0-auto"
        >
          <ReactRelayQueryRenderer
            environment={
              RelayModernEnvironment {
                "__setNet": [Function],
                "_deferrableSelections": Set {},
                "_network": Object {
                  "execute": [Function],
                },
                "_publishQueue": RelayPublishQueue {
                  "_appliedOptimisticUpdates": Set {},
                  "_backup": Object {},
                  "_handlerProvider": [Function],
                  "_pendingBackupRebase": false,
                  "_pendingData": Set {},
                  "_pendingOptimisticUpdates": Set {},
                  "_pendingUpdaters": Set {},
                  "_store": RelayMarkSweepStore {
                    "_gcEnabled": true,
                    "_hasScheduledGC": false,
                    "_index": 0,
                    "_recordSource": Object {},
                    "_roots": Map {},
                    "_subscriptions": Set {},
                    "_updatedRecordIDs": Object {},
                  },
                },
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
                "configName": undefined,
                "unstable_internal": Object {
                  "areEqualSelectors": [Function],
                  "createFragmentSpecResolver": [Function],
                  "createOperationSelector": [Function],
                  "getDataIDsFromObject": [Function],
                  "getFragment": [Function],
                  "getRequest": [Function],
                  "getSelector": [Function],
                  "getSelectorList": [Function],
                  "getSelectorsFromObject": [Function],
                  "getVariablesFromObject": [Function],
                },
              }
            }
            query={[Function]}
            render={[Function]}
            variables={
              Object {
                "cursor": null,
                "first": 100,
                "orderBy": "modified_on",
                "sort": "desc",
              }
            }
          />
        </div>,
        "className": "Dashboard flex flex-column",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <ReactRelayQueryRenderer
            environment={
              RelayModernEnvironment {
                "__setNet": [Function],
                "_deferrableSelections": Set {},
                "_network": Object {
                  "execute": [Function],
                },
                "_publishQueue": RelayPublishQueue {
                  "_appliedOptimisticUpdates": Set {},
                  "_backup": Object {},
                  "_handlerProvider": [Function],
                  "_pendingBackupRebase": false,
                  "_pendingData": Set {},
                  "_pendingOptimisticUpdates": Set {},
                  "_pendingUpdaters": Set {},
                  "_store": RelayMarkSweepStore {
                    "_gcEnabled": true,
                    "_hasScheduledGC": false,
                    "_index": 0,
                    "_recordSource": Object {},
                    "_roots": Map {},
                    "_subscriptions": Set {},
                    "_updatedRecordIDs": Object {},
                  },
                },
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
                "configName": undefined,
                "unstable_internal": Object {
                  "areEqualSelectors": [Function],
                  "createFragmentSpecResolver": [Function],
                  "createOperationSelector": [Function],
                  "getDataIDsFromObject": [Function],
                  "getFragment": [Function],
                  "getRequest": [Function],
                  "getSelector": [Function],
                  "getSelectorList": [Function],
                  "getSelectorsFromObject": [Function],
                  "getVariablesFromObject": [Function],
                },
              }
            }
            query={[Function]}
            render={[Function]}
            variables={
              Object {
                "cursor": null,
                "first": 100,
                "orderBy": "modified_on",
                "sort": "desc",
              }
            }
          />,
          "className": "Dashboard__view flex-1-0-auto",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "environment": RelayModernEnvironment {
              "__setNet": [Function],
              "_deferrableSelections": Set {},
              "_network": Object {
                "execute": [Function],
              },
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Set {},
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Set {},
                "_pendingOptimisticUpdates": Set {},
                "_pendingUpdaters": Set {},
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getRequest": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            },
            "query": [Function],
            "render": [Function],
            "variables": Object {
              "cursor": null,
              "first": 100,
              "orderBy": "modified_on",
              "sort": "desc",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Test create history has a replace method 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DashboardContainer
    footerWorkerCallback={[Function]}
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
    match={
      Object {
        "params": Object {
          "id": "datasets",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="Dashboard__view flex-1-0-auto"
      >
        <DatasetSets />
      </div>,
      "className": "Dashboard flex flex-column",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <DatasetSets />,
        "className": "Dashboard__view flex-1-0-auto",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="Dashboard__view flex-1-0-auto"
        >
          <DatasetSets />
        </div>,
        "className": "Dashboard flex flex-column",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <DatasetSets />,
          "className": "Dashboard__view flex-1-0-auto",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
